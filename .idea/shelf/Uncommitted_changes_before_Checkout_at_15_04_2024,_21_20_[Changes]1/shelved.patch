Index: API/Apps/Tournament/api/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom .views import create, get_tournaments, join, delete\n\n\nurlpatterns = [\n    path('profile/<int:profile_id>', create),\n    path('profile/<int:profile_id>/<int:tournament_id>', get_tournaments),\n    path('profile/<int:profile_id>/join/<int:tournament_id>', join),\n    path('profile/<int:profile_id>/delete/<int:tournament_id>', delete)\n\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Apps/Tournament/api/urls.py b/API/Apps/Tournament/api/urls.py
--- a/API/Apps/Tournament/api/urls.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/Apps/Tournament/api/urls.py	(date 1713205236885)
@@ -3,9 +3,9 @@
 
 
 urlpatterns = [
-    path('profile/<int:profile_id>', create),
-    path('profile/<int:profile_id>/<int:tournament_id>', get_tournaments),
-    path('profile/<int:profile_id>/join/<int:tournament_id>', join),
-    path('profile/<int:profile_id>/delete/<int:tournament_id>', delete)
+    path('profile/', create),
+    path('profile/<int:tournament_id>', get_tournaments),
+    path('profile/join/<int:tournament_id>', join),
+    path('profile/delete/<int:tournament_id>', delete)
 
 ]
\ No newline at end of file
Index: API/Apps/Tournament/api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.permissions import IsAuthenticated\n\nfrom ...Profile.models import Profile\nfrom ..models import Tournament\nfrom django.http import HttpResponse\nfrom rest_framework.response import Response\nfrom ..Serializers import TournamentGetSerializer, TournamentPostSerializer\nfrom rest_framework.decorators import api_view, permission_classes\n\n\n@api_view(['GET', 'POST'])\ndef create(request, profile_id):\n\n    try:\n        profiles = Profile.objects.get(id=profile_id)\n    except Profile.DoesNotExist:\n        return Response(status=400)\n\n    if request.method == 'GET':\n        Tournaments = Tournament.objects.all()\n        serializer = TournamentGetSerializer(Tournaments, many=True)\n        return Response(serializer.data)\n    elif request.method == 'POST':\n        request.data['created_by'] = profile_id\n        request.data['current_participants'] = [profile_id]\n        serializert = TournamentPostSerializer(data=request.data)\n        if serializert.is_valid():\n            serializert.save()\n            return Response(serializert.data, status=201)\n    return Response(serializert.errors, status=400)\n\n\n@api_view(['GET', 'PUT', 'DELETE'])\ndef get_tournaments(request, profile_id, tournament_id):\n    try:\n        instance = Profile.objects.get(id=profile_id)\n    except Profile.DoesNotExist:\n        return Response(status=400)\n\n    try:\n        tournament = Tournament.objects.get(id=tournament_id)\n    except Tournament.DoesNotExist:\n        return Response(status=400)\n\n    if request.method == 'GET':\n        serializer = TournamentGetSerializer(tournament)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializert = TournamentPostSerializer(tournament, data=request.data)\n        if serializert.is_valid():\n            serializert.save()\n            return Response()\n    elif request.method == 'DELETE':\n        if tournament.created_by.id == profile_id:\n            tournament.delete()\n            return Response(status=200)\n        else:\n            return Response(status=400)\n\n\n\n\n@api_view(['GET', 'POST'])\ndef join(request, profile_id, tournament_id):\n    try:\n        instance = Profile.objects.get(id=profile_id)\n    except Profile.DoesNotExist:\n        return Response(data={\"error\": \"invalid user\"},status=400)\n\n    try:\n        tournament = Tournament.objects.get(id=tournament_id)\n    except Tournament.DoesNotExist:\n        return Response(data={\"error\": \"invalid tournament\"}, status=400)\n\n    participants = tournament.current_participants.filter(id=profile_id)\n    if participants.exists():\n        return Response(data={\"error\": \"You are already on channel\"}, status=400)\n    elif tournament.current_participants.count() < tournament.max_participants:\n        tournament.current_participants.add(instance)\n        tournament.save()\n        return Response(status=200)\n    else:\n        return Response(data={\"error\": \"You have reached the maximum number of participants\"})\n\n\n\n@api_view(['GET', 'POST'])\ndef delete(request, profile_id, tournament_id):\n    try:\n        instance = Profile.objects.get(id=profile_id)\n    except Profile.DoesNotExist:\n        return Response(data={\"error\": \"invalid user\"},status=400)\n\n    try:\n        tournament = Tournament.objects.get(id=tournament_id)\n    except Tournament.DoesNotExist:\n        return Response(data={\"error\": \"invalid tournament\"}, status=400)\n\n    participants = tournament.current_participants.filter(id=profile_id)\n    if participants.exists():\n        tournament.current_participants.remove(instance)\n        tournament.save()\n        if tournament.current_participants.count() == 0:\n            tournament.delete()\n        return Response(status=200)\n    else:\n        return Response(status=400)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Apps/Tournament/api/views.py b/API/Apps/Tournament/api/views.py
--- a/API/Apps/Tournament/api/views.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/Apps/Tournament/api/views.py	(date 1713205236887)
@@ -8,21 +8,18 @@
 from rest_framework.decorators import api_view, permission_classes
 
 
+
 @api_view(['GET', 'POST'])
-def create(request, profile_id):
-
-    try:
-        profiles = Profile.objects.get(id=profile_id)
-    except Profile.DoesNotExist:
-        return Response(status=400)
+@permission_classes([IsAuthenticated])
+def create(request):
 
     if request.method == 'GET':
         Tournaments = Tournament.objects.all()
         serializer = TournamentGetSerializer(Tournaments, many=True)
         return Response(serializer.data)
     elif request.method == 'POST':
-        request.data['created_by'] = profile_id
-        request.data['current_participants'] = [profile_id]
+        request.data['created_by'] = request.user.profile.id
+        request.data['current_participants'] = [request.user.profile.id]
         serializert = TournamentPostSerializer(data=request.data)
         if serializert.is_valid():
             serializert.save()
@@ -31,12 +28,8 @@
 
 
 @api_view(['GET', 'PUT', 'DELETE'])
-def get_tournaments(request, profile_id, tournament_id):
-    try:
-        instance = Profile.objects.get(id=profile_id)
-    except Profile.DoesNotExist:
-        return Response(status=400)
-
+@permission_classes([IsAuthenticated])
+def get_tournaments(request, tournament_id):
     try:
         tournament = Tournament.objects.get(id=tournament_id)
     except Tournament.DoesNotExist:
@@ -51,7 +44,7 @@
             serializert.save()
             return Response()
     elif request.method == 'DELETE':
-        if tournament.created_by.id == profile_id:
+        if tournament.created_by.id == request.user.profile.id:
             tournament.delete()
             return Response(status=200)
         else:
@@ -61,22 +54,19 @@
 
 
 @api_view(['GET', 'POST'])
-def join(request, profile_id, tournament_id):
-    try:
-        instance = Profile.objects.get(id=profile_id)
-    except Profile.DoesNotExist:
-        return Response(data={"error": "invalid user"},status=400)
+@permission_classes([IsAuthenticated])
+def join(request, tournament_id):
 
     try:
         tournament = Tournament.objects.get(id=tournament_id)
     except Tournament.DoesNotExist:
         return Response(data={"error": "invalid tournament"}, status=400)
 
-    participants = tournament.current_participants.filter(id=profile_id)
+    participants = tournament.current_participants.filter(id=request.user.profile.id)
     if participants.exists():
         return Response(data={"error": "You are already on channel"}, status=400)
     elif tournament.current_participants.count() < tournament.max_participants:
-        tournament.current_participants.add(instance)
+        tournament.current_participants.add(request.user.profile.id)
         tournament.save()
         return Response(status=200)
     else:
@@ -85,20 +75,16 @@
 
 
 @api_view(['GET', 'POST'])
-def delete(request, profile_id, tournament_id):
-    try:
-        instance = Profile.objects.get(id=profile_id)
-    except Profile.DoesNotExist:
-        return Response(data={"error": "invalid user"},status=400)
-
+@permission_classes([IsAuthenticated])
+def delete(request, tournament_id):
     try:
         tournament = Tournament.objects.get(id=tournament_id)
     except Tournament.DoesNotExist:
         return Response(data={"error": "invalid tournament"}, status=400)
 
-    participants = tournament.current_participants.filter(id=profile_id)
+    participants = tournament.current_participants.filter(id=request.user.profile.id)
     if participants.exists():
-        tournament.current_participants.remove(instance)
+        tournament.current_participants.remove(request.user.profile.id)
         tournament.save()
         if tournament.current_participants.count() == 0:
             tournament.delete()
Index: API/API/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nURL configuration for API project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nfrom Apps.Game import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/v1/', include('Apps.Profile.api.urls')),\n    path('api/v1/', include('Apps.Auth.api.urls')),\n    path('api/v1/', include('Apps.Tournament.api.urls')),\n    path('api/v1/', include('Apps.SocialMedia.api.urls')),\n    path(\"api/v1/\", include(\"Apps.Chat.api.urls\")),\n    path(\"api/v1/\", include(\"Apps.Request.api.urls\")),\n    path('api/v1/', include('Apps.Game.api.urls')),\n    path('game/', views.index),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/API/urls.py b/API/API/urls.py
--- a/API/API/urls.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/API/urls.py	(date 1713205236888)
@@ -25,7 +25,7 @@
     path('admin/', admin.site.urls),
     path('api/v1/', include('Apps.Profile.api.urls')),
     path('api/v1/', include('Apps.Auth.api.urls')),
-    path('api/v1/', include('Apps.Tournament.api.urls')),
+    path('api/v1/tournament/', include('Apps.Tournament.api.urls')),
     path('api/v1/', include('Apps.SocialMedia.api.urls')),
     path("api/v1/", include("Apps.Chat.api.urls")),
     path("api/v1/", include("Apps.Request.api.urls")),
Index: API/API/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for API project.\n\nGenerated by 'django-admin startproject' using Django 5.0.3.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\nimport datetime\n\nimport Apps.Tournament.apps\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nload_dotenv()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '0a4fd7e3567eab20bab2f2d6682ea96d0d865050bfcde9c293aa7f9ec48bce55'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\n\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    \"Apps.Auth.apps.AuthConfig\",\n    \"Apps.Profile.apps.ProfileConfig\",\n    \"Apps.Tournament.apps.TournamentConfig\",\n    'Apps.SocialMedia.apps.SocialMediaConfig',\n    \"Apps.Chat.apps.ChatConfig\",\n    \"Apps.UserStatus.apps.OnlineusersConfig\",\n    \"Apps.Request.apps.RequestConfig\",\n    \"Apps.Game.apps.GameConfig\"\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'API.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates']\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'API.wsgi.application'\nASGI_APPLICATION = 'API.asgi.application'\n\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv('PG_DB'),\n        \"USER\": os.getenv('PG_USER'),\n        \"PASSWORD\": os.getenv('PG_PASSWORD'),\n        \"HOST\": os.getenv('PG_HOST'),\n        \"PORT\": os.getenv('PG_PORT'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Europe/Istanbul'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=50),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',\n    'TOKEN_EXPIRED_CALLBACK': 'token_expired_callback',\n    'JTI_CLAIM': 'jti',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),\n}\n\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_SSL = False\nCACHES = {\n    'default': {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        'LOCATION': 'unique-snowflake',\n    }\n}\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media/images'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/API/settings.py b/API/API/settings.py
--- a/API/API/settings.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/API/settings.py	(date 1713205236890)
@@ -97,7 +97,7 @@
     "default": {
         "BACKEND": "channels_redis.core.RedisChannelLayer",
         "CONFIG": {
-            "hosts": [("127.0.0.1", 6379)],
+            "hosts": [("192.168.228.2", 6379)],
         },
     },
 }
Index: API/Apps/Profile/api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.decorators import permission_classes, authentication_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.views import APIView\nfrom rest_framework_simplejwt.authentication import JWTAuthentication\nfrom ..models import Profile\nfrom rest_framework.response import Response\n\nfrom .Serializers import ProfileGetSerializer, ProfilePostSerializer, ProfileFriendsSerializer, ProfileStatsSerializer\nfrom ...Request.models import Request\n\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileView(APIView):\n    def get(self, request, profile_nickname):\n\n        if(not profile_nickname):\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile = Profile.objects.get(nickname=profile_nickname)\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile_serializer = ProfileGetSerializer(profile)\n        return Response(profile_serializer.data, status=200)\n\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileDetailView(APIView):\n    def get(self, request):\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile_serializer = ProfileGetSerializer(profile)\n        return Response(profile_serializer.data, status=200)\n\n    def put(self, request):\n        print(request.data.get('profile-picture'))\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile_serializer = ProfilePostSerializer(profile, data=request.data)\n        if not profile_serializer.is_valid():\n            return Response(profile_serializer.errors, status=400)\n        profile_serializer.save()\n        return Response(profile_serializer.data, status=200)\n\n    def delete(self, request):\n        profile = request.user.profileq\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile.delete()\n        return Response(status=204)\n\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileStatsView(APIView):\n    def get(self, request):\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        stats = profile.stats\n        serializer = ProfileStatsSerializer(stats)\n        return Response(serializer.data, status=200)\n\n    def post(self, request,profile_id):\n        profile = Profile.objects.get(id=profile_id)\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile.stats = request.data\n        profile.save()\n        return Response(profile.stats, status=201)\n\n    def put(self, request,profile_id):\n        profile = Profile.objects.get(id=profile_id)\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile.stats = request.data\n        profile.save()\n        return Response(profile.stats, status=200)\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileGameHistoryView(APIView):\n    def get(self, request):\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        history = profile.game_history\n        return Response(history, status=200)\n\n    def post(self, request,profile_id):\n        profile = Profile.objects.get(id=profile_id)\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile.game_history = request.data\n        profile.save()\n        return Response(profile.game_history, status=201)\n\n    def put(self, request,profile_id):\n        profile = Profile.objects.get(id=profile_id)\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        profile.game_history = request.data\n        profile.save()\n        return Response(profile.game_history, status=200)\n\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileFriendsView(APIView):\n    def get(self, request):\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        serializer = ProfileFriendsSerializer(profile.friends, many=True)\n        return Response(serializer.data, status=200)\n\n    def post(self, request):\n        request_id = request.data.get('request_id')\n        try:\n            notification_request = Request.objects.get(id=request_id)\n        except Request.DoesNotExist:\n            return Response({\"error\": \"Request not found\"}, status=404)\n        notification_request.status = 'accepted'\n        notification_request.save()\n        profile = request.user.profile\n        if not profile:\n            return Response({\"error\": \"Profile not found\"}, status=404)\n        nickname = request.data.get('nickname')\n        friend = Profile.objects.get(nickname=nickname)\n        if not friend:\n            return Response({\"error\": \"Friend not found\"}, status=404)\n        profile.friends.add(friend)\n        profile.save()\n        return Response(status=201)\n\n\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass ProfileBlockedUsersView(APIView):\n    def post(self, request):\n        profile_id = request.data.get('user_id')\n        profile = request.user.profile\n\n        if Profile.objects.filter(id=profile_id).exists():\n            return Response({\"error\": \"Profile not found\"}, status=404)\n\n        if profile.blocked_users.filter(id=profile_id).exists():\n            profile.blocked_users.add(profile_id)\n            if profile.friends.filter(id=profile_id):\n                profile.friends.remove(profile_id)\n        else:\n            profile.blocked_users.remove(profile_id)\n        profile.save()\n        return Response(status=200)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Apps/Profile/api/views.py b/API/Apps/Profile/api/views.py
--- a/API/Apps/Profile/api/views.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/Apps/Profile/api/views.py	(date 1713205236891)
@@ -45,7 +45,7 @@
         return Response(profile_serializer.data, status=200)
 
     def delete(self, request):
-        profile = request.user.profileq
+        profile = request.user.profile
         if not profile:
             return Response({"error": "Profile not found"}, status=404)
         profile.delete()
Index: API/Apps/Profile/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.dispatch import receiver\nfrom django.db.models.signals import m2m_changed\n\n\nclass Stats(models.Model):\n    total_games = models.IntegerField()\n    total_wins = models.IntegerField()\n    total_losses = models.IntegerField()\n    points = models.IntegerField()\n    # match_history = models.ManyToManyField('Game', blank=True)\n\n    def __str__(self):\n        return f\"Total Games: {self.total_games}, Total Wins: {self.total_wins}, Total Losses: {self.total_losses}, Points: {self.points}\"\n\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE,null=True)\n    nickname = models.CharField(max_length=100, blank=True, null=True, default=None, unique=True)\n    stats = models.OneToOneField(Stats, on_delete=models.CASCADE, null=True)\n    profile_picture = models.ImageField(upload_to='profile-pictures/',  default=\"profile-pictures/default.svg\")\n    is_online = models.BooleanField(default=False)\n    is_verified = models.BooleanField(default=False)\n    friends = models.ManyToManyField('Profile', blank=True)\n    bio = models.TextField(blank=True, null=True, default=None)\n    blocked_users = models.ManyToManyField('Profile', blank=True)\n\n    def __str__(self):\n        return f\"{self.nickname if self.nickname else self.user.username}\"\n\n\n@receiver(m2m_changed, sender=Profile.friends.through)\ndef update_friends(sender, instance, action, **kwargs):\n    if action == 'post_add':\n        for friend in kwargs['pk_set']:\n            friend_profile = Profile.objects.get(pk=friend)\n            friend_profile.friends.add(instance)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Apps/Profile/models.py b/API/Apps/Profile/models.py
--- a/API/Apps/Profile/models.py	(revision f46946958b73c4373cd0114362f19ac1432d0444)
+++ b/API/Apps/Profile/models.py	(date 1713205236892)
@@ -22,9 +22,9 @@
     profile_picture = models.ImageField(upload_to='profile-pictures/',  default="profile-pictures/default.svg")
     is_online = models.BooleanField(default=False)
     is_verified = models.BooleanField(default=False)
-    friends = models.ManyToManyField('Profile', blank=True)
+    friends = models.ManyToManyField('Profile', blank=True, related_name='profile_friends')
     bio = models.TextField(blank=True, null=True, default=None)
-    blocked_users = models.ManyToManyField('Profile', blank=True)
+    blocked_users = models.ManyToManyField('Profile', blank=True, related_name='users_blocked')
 
     def __str__(self):
         return f"{self.nickname if self.nickname else self.user.username}"

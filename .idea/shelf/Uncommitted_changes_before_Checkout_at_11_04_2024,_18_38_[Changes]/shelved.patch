Index: Backend/static/scripts/social.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {API_URL, BASE_URL,assignRouting} from \"./spa.js\";\nimport {notify} from \"../components/Notification.js\";\nimport BaseComponent from \"../components/Component.js\";\nimport {request} from \"./Request.js\";\nimport Spinner from \"../components/spinner.js\";\nimport {getSocket} from \"./requests.js\";\nimport {escapeHTML} from \"./utils.js\";\nclass ChatFriendsComponent extends  BaseComponent{\n    constructor(state,parentElement = null) {\n        super(state,parentElement);\n        this.html = this.handleHTML()\n    }\n    handleHTML()\n    {\n        return `\n              ${this.state.friends.map(friend => `\n                <div class=\"user-wrapper\">\n                  <div class=\"user-pic-wrapper\">\n                    <img\n                      src=\"https://picsum.photos/seed/picsum/200/300\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <div class=\"user-info-wrapper\">\n                    <div\n                      class=\"d-flex align-items-center justify-content-center gap-2\"\n                    >\n                      <h6>${friend.nickname.length <=0 ? friend.user.username: friend.nickname}</h6>\n                      <div class=\"online-icon\"></div>\n                    </div>\n                    <span>Active Now</span>\n            </div>\n            </div>\n              `).join('')}\n`\n    }\n    render() {\n        super.render();\n    }\n    setState(newState)\n    {\n        this.state = {...this.state, ...newState};\n        this.html = this.handleHTML();\n        this.render();\n    }\n}\nclass SocialPostsComponent extends BaseComponent {\n    constructor(state, parentElement = null) {\n        super(state, parentElement);\n        this.html = \"\";\n    }\n    handleHTML() {\n        if(this.state.tweets === undefined)\n            return \"\";\n        let userId = this.state.userId;\n    return`\n    ${this.state.tweets.map(tweet => `\n            <div class=\"post-container\">\n                  <div class=\"d-flex position-relative\">\n                    <pong-redirect class=\"post-info\" href=\"/profile/${tweet.from_user.nickname}\">\n                      <div class=\"user-pic-wrapper\">\n                        <img\n                          src=\"https://picsum.photos/seed/picsum/200/300\"\n                          alt=\"\"\n                        />\n                      </div>\n                      <div>\n                        <h6>${tweet.from_user.nickname}</h6>\n                        <span>${calculateDate(tweet.date)}</span>\n                      </div>\n                    </pong-redirect>\n                    <div>\n                      <img  src=\"/static/public/more.svg\" alt=\"\" style=\"width: 50px\" />\n                    </div>\n                  </div>\n                  <div>\n                    <div class=\"post-text\">\n                      <p>\n                        ${escapeHTML(tweet.content)}\n                      </p>\n                    </div>\n                    ${tweet.image ? `\n                    <div class=\"post-image\">\n                      <img  src=\"${BASE_URL}${tweet.image}\" alt=\"There is a problem with the image\" />\n                    </div>\n                    `: ''}\n                  </div>\n                  <div class=\"post-interaction\">\n                    <div class=\"like-button\" data-tweet-id=\"${tweet.id}\">\n                      <img  src=\"/static/public/${tweet.liked_users.includes(userId) ? \"liked\" :\"not-liked\"}.svg\" alt=\"\" />\n                    </div>\n                    <button class=\"comment-button\" data-tweet-id=\"${tweet.id}\"\">\n                      <img  src=\"/static/public/chat-bubble.svg\"  alt=\"\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            `).join('')}\n            `\n    }\n    setState(newState)\n    {\n        this.state = {...this.state, ...newState};\n        this.html = this.handleHTML()\n        this.render()\n    }\n}\nclass PostTweetFormComponent extends  BaseComponent\n{\n    constructor(state,parentElement = null) {\n        super(state,parentElement);\n        this.html = this.handleHTML();\n    }\n    handleHTML()\n    {\n        if(this.state.imageUrl === undefined)\n            return '';\n        return `\n            <div class=\"uploaded-image\">\n\n                <button class=\"image-close-button\" id=\"preview-close-button\" type=\"button\">\n                    X\n                </button>\n            <img src=${this.state.imageUrl} alt=\"\"  />\n         </div>\n\n        `\n    }\n render() {\n        if(this.state.imageUrl === undefined)\n        {\n            document.getElementById('image-preview')?.remove();\n            return;\n        }\n        if(document.getElementById('image-preview'))\n        {\n            document.getElementById('image-preview').remove();\n        }\n     let div = document.createElement('div');\n    div.innerHTML = this.html;\n    this.parentElement.appendChild(div);\n    div.id = 'image-preview';\n    let previewCloseButton = document.getElementById('preview-close-button');\n    if(previewCloseButton)\n    {\n        previewCloseButton.addEventListener('click', () => {\n            postTweetFormComponent.setState({imageUrl: undefined});\n        });\n    }\n}\n\n    setState(newState)\n    {\n        this.state = {...this.state, ...newState};\n        this.html = this.handleHTML();\n        this.render();\n    }\n\n}\nclass SelectedPostComponent extends BaseComponent{\n    constructor(state, parentElement = null)\n    {\n        super(state, parentElement);\n        this.html = this.handleHTML();\n    }\n    handleHTML()\n    {\n        const {results} = this.state.tweet;\n        const {tweet, comments} = results;\n        const {userId} = this.state;\n        return `\n            <div class=\"selected-post\">\n              <div class=\"post-container\">\n                <div class=\"d-flex position-relative\">\n                  <div class=\"post-info\">\n                    <div class=\"user-pic-wrapper\">\n                      <img\n                        src=\"https://picsum.photos/seed/picsum/200/300\"\n                        alt=\"\"\n                      />\n                    </div>\n                    <div>\n                      <h6>TEST1</h6>\n                      <span>${calculateDate(tweet.date)}</span>\n                    </div>\n                  </div>\n                  <div>\n                    <img src=\"/static/public/more.svg\" alt=\"\" style=\"width: 50px\" />\n                  </div>\n                  <div id=\"comment-back-button\" style=\"cursor: pointer\">\n                    <img src=\"/static/public/go-back.svg\" alt=\"Load Failed\" />\n                  </div>\n                </div>\n                <div>\n                  <div class=\"post-text\">\n                    <p>\n                    ${escapeHTML(tweet.content)}\n                    </p>\n                  </div>\n                  ${tweet.image ? \n            `<div class=\"post-image\">\n                    <img src=\"${BASE_URL}${tweet.image}\" alt=\"There was a problem with the image\" />\n              </div>`: ''}\n                </div>\n                <div class=\"post-interaction\">\n                  <div class=\"like-button\" data-tweet-id=\"${tweet.id}\">\n                    <img src=\"/static/public/${tweet.liked_users.includes(userId) ? \"liked\" :\"not-liked\"}.svg\" alt=\"\" />\n                  </div>\n                  <div>\n                    <img src=\"/static/public/chat-bubble.svg\" alt=\"\" />\n                  </div>\n                  <form id=\"comment-send-form\">\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      id=\"comment-input\"\n                      placeholder=\"WRITE A COMMENT...\"\n                    />\n                  </form>\n                </div>\n                <div class=\"post-comments\">\n            ${comments.map(comment => `\n          <div class=\"post-comment\">\n                <div class=\"user-pic-wrapper\" style=\"height: 3rem\">\n                  <img\n                    src=\"https://picsum.photos/seed/picsum/200/300\"\n                    alt=\"\"\n                  />\n                </div>\n                <div style=\"flex: 1\">\n                <div style=\"display: flex;justify-content: space-between\">          \n              <h6>${comment.from_user.nickname}</h6>\n                <span>${calculateDate(comment.date)}</span>\n</div>\n                  <p>\n                    ${escapeHTML(comment.content)}\n                  </p>\n                </div>\n              </div>\n        `).join('')}\n        \n                </div>\n              </div>\n            </div>\n        `\n    }\n    setState(newState)\n    {\n        this.state = {...this.state, ...newState};\n        this.html = this.handleHTML();\n        this.render();\n    }\n    render()\n    {\n        super.render();\n        let backButton = document.getElementById('comment-back-button');\n        backButton.addEventListener('click', () => {\n\n            history.pushState({}, '', '/social');\n            renderAllPosts();\n        });\n    }\n}\nclass ConversationComponent extends BaseComponent\n{\n    constructor(state, parentElement = null) {\n        super(state, parentElement);\n    }\n    handleHtml()\n    {\n        return `\n        ${\n            this.state.messages.map(message => `\n             ${message.user.id === this.state.senderId ? `\n              <div class=\"sent-message-container\">\n                  <div class=\"message-data-wrapper\">\n                    <span class=\"sent-message-date\">${calculateDate(message.created_date)}</span>\n                    <span class=\"sent-message-name\">${message.user.nickname}</span>\n                </div>\n                  <p>\n                    ${escapeHTML(message.content)}\n                  </p>\n                </div>\n                `: `\n                <div class=\"received-message-container\">\n                  <div class=\"message-data-wrapper\">\n                  <span class=\"received-message-name\">${message.user.nickname}</span>\n                  <span class=\"received-message-date\">${calculateDate(message.created_date)}</span>\n                </div>\n                  <p>\n                    ${escapeHTML(message.content)}\n                  </p>\n                </div>\n                `}\n            `).join('')\n        }\n        `\n\n    }\n    render() {\n        this.html = this.handleHtml();\n        this.parentElement.innerHTML = this.html;\n    }\n    setState(newState) {\n        this.state = {...this.state, ...newState};\n        console.log(\"state\",this.state)\n        this.render();\n    }\n}\nlet parentElement = document.getElementById('posts-wrapper');\nlet socialPostsComponent = new SocialPostsComponent({}, parentElement);\nlet parentFormElement = document.getElementById('social-send-form');\nlet postTweetFormComponent = new PostTweetFormComponent({}, parentFormElement);\nfunction   calculateDate(date)\n    {\n    let tweetDate = new Date(date);\n    let currentDate = new Date();\n    let differenceInSeconds = Math.floor((currentDate - tweetDate) / 1000);\n\n    let minute = 60;\n    let hour = minute * 60;\n    let day = hour * 24;\n    let week = day * 7;\n    if (differenceInSeconds < minute) {\n        return `${differenceInSeconds} seconds ago`;\n    }\n    else if (differenceInSeconds < hour) {\n        return `${Math.floor(differenceInSeconds / minute)} minutes ago`;\n    }\n    else if (differenceInSeconds < day) {\n        return `${Math.floor(differenceInSeconds / hour)} hours ago`;\n        }\n    else if (differenceInSeconds < week) {\n        return `${Math.floor(differenceInSeconds / day)} days ago`;\n    }\n    else {\n        return `${Math.floor(differenceInSeconds / week)} weeks ago`;\n        }\n    }\n\nconst fetchChatFriends = async () => {\n\n    const endpoint = `${API_URL}/profile/friends`;\n    try {\n        let response = await request(endpoint, {\n            method: 'GET',\n        });\n        let parentElement = document.getElementById('user-data-wrapper');\n        let chatFriendsComponent = new ChatFriendsComponent({friends: response},parentElement);\n        let input = document.getElementById('friend-search-input');\n        input.addEventListener('keyup', async (event) => {\n            let value = event.target.value;\n               let filteredFriends = response.filter(friend => {\n        let nameToCheck = friend.user.username;\n        return nameToCheck.toLowerCase().includes(value.toLowerCase());\n           });\n            chatFriendsComponent.setState({friends: filteredFriends});\n        });\n        chatFriendsComponent.render();\n\n    }\n    catch (error) {\n        console.error('Error:', error);\n    }\n}\nconst fetchSocialPosts = async () => {\n try{\n      let response = await request(`${API_URL}/tweets`, {method: 'GET'})\n        socialPostsComponent.setState({tweets: response.results.tweets});\n\n }\n    catch(error)\n        {\n            console.error('Error:', error);\n            notify('Error fetching social posts', 3, 'error');\n        }\n\n    }\nasync function submitTweet(event) {\n     event.preventDefault();\n        let inputValue = document.getElementById('social-text-input').value;\n        let image = document.getElementById(\"image-add\");\n        let formData = new FormData();\n        formData.append('content', inputValue);\n        if(image.files.length > 0)\n            formData.append('image', image.files[0]);\n        try{\n        let data = await request(`${API_URL}/post-tweet`, {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'Content-Type': '',\n            }\n        });\n        notify('Tweet posted successfully', 3, 'success');\n        let {tweet} = data;\n        socialPostsComponent.setState({tweets: [tweet, ...socialPostsComponent.state.tweets]});\n        }\n        catch(error)\n        {\n            console.error('Error:', error);\n\n        notify('Error posting tweet', 3, 'error');\n        }\n}\nasync function assignLikeButtons()\n    {\n        let likeButtons = document.getElementsByClassName('like-button');\n        for(let button of likeButtons)\n        {\n            let tweetId = button.getAttribute('data-tweet-id');\n            button.addEventListener('click', async () => {\n                try{\n                    let data = await request(`${API_URL}/like_tweet/${tweetId}`, {\n                        method: 'PATCH',\n\n                    });\n                    console.log(data);\n                    button.children[0].src = button.children[0].src.includes('not') ?  '/static/public/liked.svg' : '/static/public/not-liked.svg';\n                }\n                catch(error)\n                {\n                    console.error('Error:', error);\n                    notify('Error liking tweet', 3, 'error');\n                }\n            });\n        }\n    }\nasync function assignEventListeners() {\n    let form = document.getElementById('social-send-form');\n    form.addEventListener('submit', submitTweet);\n    let imageAdd = document.getElementById('image-add');\n    imageAdd.addEventListener('change', (event) => {\n        let file = event.target.files[0];\n        let url = URL.createObjectURL(file);\n        postTweetFormComponent.setState({imageUrl : url});\n    });\n    async function assignCommentButtons()\n    {\n        let commentButtons = document.getElementsByClassName('comment-button');\n        for(let button of commentButtons)\n        {\n            let tweetId = button.getAttribute('data-tweet-id');\n            button.addEventListener('click', async () => {\n                history.pushState({}, '', `/social/tweet/${tweetId}`);\n                await renderIndividualPost(tweetId);\n            });\n        }\n    }\n\n    await assignLikeButtons();\n    await assignCommentButtons();\n}\nasync function getProfile()\n{\n    try{\n        let data = await request(`${API_URL}/profile`, {\n            method: 'GET'\n        });\n        localStorage.setItem('activeUserId', data.id);\n        localStorage.setItem('activeUserNickname', data.nickname);\n        socialPostsComponent.setState({userId: data.id})\n        let nickname = document.getElementById('username');\n        nickname.innerText = data.nickname;\n    }\n    catch(error)\n    {\n        console.error('Error:', error);\n        notify('Error fetching profile', 3, 'error');\n    }\n}\nconst renderIndividualPost = async (tweetId) => {\n    let response = await request(`${API_URL}/get-tweet-and-comments/${tweetId}`, {\n        method: 'GET',\n    });\n\n        let data = await request(`${API_URL}/profile`, {\n            method: 'GET',\n        });\n    let parentElement = document.getElementById('social-container');\n    let selectedPostComponent = new SelectedPostComponent({tweet: response,userId:data.id}, parentElement);\n    selectedPostComponent.render();\n    await assignLikeButtons();\n    await fetchChatFriends()\n    let form = document.getElementById('comment-send-form');\n    form.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    let inputValue = document.getElementById('comment-input').value;\n        try {\n            let data = await request(`${API_URL}/post-comment`, {\n                method: 'POST',\n                body: JSON.stringify({content: inputValue, tweet: tweetId})\n            });\n        notify('Comment posted successfully', 3, 'success');\n        let newComments = [ data, ...selectedPostComponent.state.tweet.results.comments];\n        selectedPostComponent.setState({tweet: {results: {tweet: selectedPostComponent.state.tweet.results.tweet, comments: newComments}}});\n        }\n        catch(error)\n        {\n            console.error('Error:', error);\n            notify('Error posting comment', 3, 'error');\n        }\n    }\n    );\n}\nconst renderAllPosts = async () => {\n    let container =    document.getElementById('social-container');\n    container.innerHTML = `\n                  <div\n              class=\"social-wrapper\"\n              id=\"social-wrapper\"\n            >\n              <div class=\"d-flex flex-column gap-2\">\n                <div class=\"social-send-info\">\n                  <div class=\"user-pic-wrapper\">\n                    <img\n                      src=\"https://picsum.photos/seed/picsum/200/300\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <h6 id=\"username\">Test1</h6>\n                </div>\n                <form class=\"social-send\" id=\"social-send-form\">\n                  <input\n                    type=\"text\"\n                    name=\"\"\n                    id=\"social-text-input\"\n                    style=\"background-color: rgba(126, 126, 126, 0.397)\"\n                    placeholder=\"What do you think\"\n                  />\n                    <div class=\"form-input-wrapper\">\n                    <label for=\"image-add\" class=\"custom-file-upload\"></label>\n                    <input\n                    type=\"file\" id=\"image-add\"\n                    src=\"{% static '/public/image.svg' %}\" alt=\"\" style=\"width: 35px\"\n                    accept=\"image/jpeg,image/png,image/gif\"\n                    >\n                <button type=\"submit\" id=\"send-button\">\n                    <img src=\"/static/public/send.svg\" alt=\"\" />\n                </button>\n                    </div>\n                </form>\n              </div>\n              <div class=\"posts-container\" id=\"posts-wrapper\">\n                <div class=\"post-container skeleton\" id=\"post-wrapper\">\n                </div>\n              </div>\n            </div>\n\n    `\n    socialPostsComponent.parentElement = document.getElementById('posts-wrapper');\n    postTweetFormComponent.parentElement = document.getElementById('social-send-form');\n    await Promise.all([fetchChatFriends(), fetchSocialPosts(), getProfile()]);\n    await assignEventListeners();\n\n}\nasync function handleAddFriend(element)\n{\n    const socket = getSocket();\n    let nickname = element.children[1].children[0].innerText;\n    let friendRequestButton = document.getElementById('options-add-friend');\n    try{\n        let spinner = new Spinner({isVisible:true,className:\"options-spinner\"},friendRequestButton);\n        spinner.render();\n        let activeUserNickname = localStorage.getItem('activeUserNickname');\n        let body = {\n            request_type: \"friend\",\n            sender: activeUserNickname,\n            receiver: nickname\n        }\n        socket.send(JSON.stringify(body));\n        spinner.setState({isVisible: false});\n        friendRequestButton.innerText = 'Add Friend'\n        notify('Friend request sent', 3, 'success');\n\n    }\n    catch(error)\n    {\n        console.error('Error:', error);\n        notify('Error adding friend', 3, 'error');\n    }\n}\nfunction addContextListeners(element)\n{\n    let addFriendButton = document.getElementById('options-add-friend');\n    let blockUserButton = document.getElementById('options-block-user');\n    addFriendButton.addEventListener('click',() => handleAddFriend(element));\n\n}\nfunction handleRightClick(event,element) {\n      event.preventDefault();\n      let mouseX = event.clientX;\n      let mouseY = event.clientY;\n      let chatOptions = document.getElementById(\"chat-options\");\n      chatOptions.style.top = `${mouseY}px`;\n      chatOptions.style.left = `${mouseX}px`;\n      chatOptions.classList.add(\"chat-options-open\");\n      chatOptions.addEventListener(\"click\", (event) => {\n        event.stopPropagation();\n      });\n\n      function handleChatContext()\n      {\n          let redirect = document.getElementById('profile-redirect');\n          redirect.setAttribute('href', `/profile/${element.children[1].children[0].innerText}`)\n      }\n      handleChatContext()\n    addContextListeners(element)\n      document.addEventListener(\n        \"click\",\n        function closeMenu(event) {\n          chatOptions.classList.remove(\"chat-options-open\");\n          document.removeEventListener(\"click\", closeMenu);\n        },\n        { once: true }\n      );\n}\nasync function connectToRoom(room,conversationComponent)\n{\n    const nickname = localStorage.getItem('activeUserNickname');\n    const socket = new WebSocket(`ws://localhost:8000/ws/chat/${room.id}/${nickname}`);\n    let chatSendForm = document.getElementById('chat-send');\n    let chatInput = document.getElementById('chat-input');\n    chatSendForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        let content = chatInput.value;\n        if(content.length <= 0)\n            return;\n        socket.send(JSON.stringify({message: content}));\n        chatInput.value = '';\n    });\n    socket.onmessage = (event) => {\n        let data = JSON.parse(event.data);\n        console.log(data)\n        let message = {\n        content: data.message,\n        user: {nickname: data.user,id: data.id},\n        created_date: new Date()\n        }\n        conversationComponent.setState({messages: [message,...conversationComponent.state.messages ]});\n        console.log(\"state\",conversationComponent.state)\n    }\n}\nasync function fetchRoomData(element) {\n    let nickname = element.children[1].children[0].innerText;\n    let wrapper = document.getElementById('conversation-wrapper');\n    let activeUserInfoWrapper = document.getElementById('active-user-info');\n    activeUserInfoWrapper.children[0].innerText = nickname;\n    let spinner = new Spinner({isVisible:true},wrapper);\n    spinner.render();\n    try {\n        let data = await  request(`${API_URL}/start-chat`, {\n            method: 'POST',\n            body: JSON.stringify({nickname: nickname})\n        });\n        let {room} = data;\n        let conversationWrapper = document.getElementById('conversation-wrapper');\n        conversationWrapper.classList.remove('no-chat-wrapper')\n        let conversationComponent = new ConversationComponent(\n        {\n            messages: room.messages.toReversed(),\n            senderId: parseInt(localStorage.getItem(\"activeUserId\")),\n            receiverId: room.second_user\n            },\n            conversationWrapper);\n        spinner.setState({isVisible: false});\n        conversationComponent.render();\n        await connectToRoom(room,conversationComponent);\n    }\n    catch (err) {\n        console.error('Error:', err);\n        spinner.setState({isVisible: false});\n        notify('Error starting chat', 3, 'error');\n    }\n}\nfunction handleChatState() {\n\n    let chatContainer = document.getElementById(\"chat-container\");\n  let socialWrapper = document.getElementById(\"social-container\");\n  let chatCloseButton = document.getElementById(\"chat-close-button\");\n  chatCloseButton.addEventListener(\"click\", () => {\n    chatContainer.classList.add(\"chat-transition\");\n    setTimeout(() => {\n      chatContainer.classList.remove(\"chat-transition\");\n      socialWrapper.classList.add(\"social-wrapper-chat-closed\");\n    }, 1000);\n    chatContainer.classList.add(\"chat-closed\");\n  });\n  async function toggleChat() {\n      await fetchRoomData(this);\n      if (chatContainer.classList.contains(\"chat-closed\")) {\n      chatContainer.classList.add(\"chat-transition\");\n      setTimeout(() => {\n        chatContainer.classList.remove(\"chat-transition\");\n        chatContainer.classList.remove(\"chat-closed\");\n      }, 1000);\n      socialWrapper.classList.add(\"social-wrapper-open\");\n      socialWrapper.classList.remove(\"social-wrapper-chat-closed\");\n    }\n\n  }\n  let allUsers = document.getElementsByClassName(\"user-wrapper\");\n  for (let i = 0; i < allUsers.length; i++) {\n    allUsers[i].addEventListener(\"click\", toggleChat);\n  }\n}\nfunction handleChatEvents() {\n  let elements = document.getElementsByClassName(\"user-wrapper\");\n  for (let element of elements) {\n    element.addEventListener(\"contextmenu\",(event) => handleRightClick(event,element));\n  }\n}\n\nconst App = async () => {\n    let regex = /\\/tweet\\/(\\d+)/;\n    let match = window.location.pathname.match(regex);\n    if (match)\n        await renderIndividualPost(match[1]);\n    else\n        await renderAllPosts();\n    assignRouting();\n    handleChatEvents();\n    handleChatState();\n    //I don't know if this make sense but, I added this to prevent the form from submitting when\n    //there is no chat active\n  document.querySelectorAll('form').forEach(form => {\n        form.addEventListener('submit', (event) => event.preventDefault());\n    })\n}\nApp().catch(error => console.error('Error:', error));\n\nwindow.addEventListener('popstate', async (event) => {\n    if(window.location.pathname === '/social/')\n        await renderAllPosts();\n    else\n    {\n        let regex = /\\/tweet\\/(\\d+)/;\n        let match = window.location.pathname.match(regex);\n        if (match) {\n            await renderIndividualPost(match[1]);\n        }\n    }\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/static/scripts/social.js b/Backend/static/scripts/social.js
--- a/Backend/static/scripts/social.js	(revision 4e63dacd0a350a5fb6414f960501ae17d0ac2a57)
+++ b/Backend/static/scripts/social.js	(date 1712849392310)
@@ -60,8 +60,8 @@
                     <pong-redirect class="post-info" href="/profile/${tweet.from_user.nickname}">
                       <div class="user-pic-wrapper">
                         <img
-                          src="https://picsum.photos/seed/picsum/200/300"
-                          alt=""
+                            src="${BASE_URL}${tweet.from_user.profile_picture}"
+                            alt=""
                         />
                       </div>
                       <div>
@@ -459,7 +459,7 @@
         });
         localStorage.setItem('activeUserId', data.id);
         localStorage.setItem('activeUserNickname', data.nickname);
-        socialPostsComponent.setState({userId: data.id})
+        socialPostsComponent.setState({userId: data.id});
         let nickname = document.getElementById('username');
         nickname.innerText = data.nickname;
     }
@@ -503,7 +503,21 @@
     }
     );
 }
+
+async function getProfile2() {
+    try {
+        let data = await request(`${API_URL}/profile`, {
+            method: 'GET'
+        });
+        return data.profile_picture;
+    } catch (error) {
+        console.error('Error:', error);
+        notify('Error fetching profile', 3, 'error');
+        return null;
+    }
+}
 const renderAllPosts = async () => {
+        let profile_picture_url = await getProfile2();
     let container =    document.getElementById('social-container');
     container.innerHTML = `
                   <div
@@ -514,11 +528,11 @@
                 <div class="social-send-info">
                   <div class="user-pic-wrapper">
                     <img
-                      src="https://picsum.photos/seed/picsum/200/300"
-                      alt=""
+                      src="${BASE_URL}${profile_picture_url}"
+                     alt=""
                     />
                   </div>
-                  <h6 id="username">Test1</h6>
+                  <h6 id="username">Test12</h6>
                 </div>
                 <form class="social-send" id="social-send-form">
                   <input
@@ -530,8 +544,8 @@
                   />
                     <div class="form-input-wrapper">
                     <label for="image-add" class="custom-file-upload"></label>
-                    <input
-                    type="file" id="image-add"
+                    <inputadd
+                    type="file" id="image-"
                     src="{% static '/public/image.svg' %}" alt="" style="width: 35px"
                     accept="image/jpeg,image/png,image/gif"
                     >
Index: Backend/templates/home/home.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"{% static  'styles/main.css'%}\" />\n    <link\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n      integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\"\n      crossorigin=\"anonymous\"\n    />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Pixelify+Sans&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <title>Home Page</title>\n  </head>\n  <body>\n    <div class=\"main-profile-data\">\n        <pong-redirect class=\"inbox-profile-wrapper\" id=\"profile-image-wrapper\">\n          <img src=\"\" id=\"profile-image\" alt=\"\" />\n        </pong-redirect>\n        <div class=\"inbox-wrapper\">\n          <input type=\"checkbox\" id=\"input-button\" />\n          <label for=\"input-button\" class=\"input-label\">\n            <img src=\"{% static 'public/inbox.svg' %}\" alt=\"cannot load\" />\n          </label>\n          <ul class=\"inbox-list\" id=\"inbox-list\">\n          </ul>\n        </div>\n      </div>\n    <main class=\"main\" id=\"main\">\n      <div\n        class=\"background container-fluid position-relative\"\n        style=\"padding: 0\"\n      >\n        <div class=\"main-buttons-wrapper\">\n          <div class=\"play-wrapper\">\n            <div\n              style=\"\n                display: flex;\n                align-items: center;\n                justify-content: center;\n              \"\n            >\n              <h1>WELCOME TO PONG</h1>\n            </div>\n            <div class=\"button-wrapper\">\n              <button class=\"play-button\">LEADERBOARD</button>\n              <button class=\"play-button\" id=\"multiplayer-button\">\n                MULTIPLAYER\n              </button>\n              <button class=\"play-button\">SINGLEPLAYER</button>\n              <pong-redirect href=\"/social/\">\n                  <button class=\"play-button\">SOCIAL</button>\n              </pong-redirect>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n      <script  src=\"{% static '/scripts/spa.js' %}\" id=\"spa\" type=\"module\"></script>\n  </body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/templates/home/home.html b/Backend/templates/home/home.html
--- a/Backend/templates/home/home.html	(revision 4e63dacd0a350a5fb6414f960501ae17d0ac2a57)
+++ b/Backend/templates/home/home.html	(date 1712849392299)
@@ -38,7 +38,7 @@
         class="background container-fluid position-relative"
         style="padding: 0"
       >
-        <div class="main-buttons-wrapper">
+        <div class="main-buttons-wrapper">*
           <div class="play-wrapper">
             <div
               style="
Index: API/API/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for API project.\n\nGenerated by 'django-admin startproject' using Django 5.0.3.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\nimport datetime\n\nimport Apps.Tournament.apps\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nload_dotenv()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '0a4fd7e3567eab20bab2f2d6682ea96d0d865050bfcde9c293aa7f9ec48bce55'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\n\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    \"Apps.Auth.apps.AuthConfig\",\n    \"Apps.Profile.apps.ProfileConfig\",\n    \"Apps.Tournament.apps.TournamentConfig\",\n    'Apps.SocialMedia.apps.SocialMediaConfig',\n    \"Apps.Chat.apps.ChatConfig\",\n    \"Apps.UserStatus.apps.OnlineusersConfig\",\n    \"Apps.Request.apps.RequestConfig\"\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'API.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates']\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'API.wsgi.application'\nASGI_APPLICATION = 'API.asgi.application'\n\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv('PG_DB'),\n        \"USER\": os.getenv('PG_USER'),\n        \"PASSWORD\": os.getenv('PG_PASSWORD'),\n        \"HOST\": os.getenv('PG_HOST'),\n        \"PORT\": os.getenv('PG_PORT'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Europe/Istanbul'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=50),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',\n    'TOKEN_EXPIRED_CALLBACK': 'token_expired_callback',\n    'JTI_CLAIM': 'jti',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),\n}\n\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_SSL = False\nCACHES = {\n    'default': {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        'LOCATION': 'unique-snowflake',\n    }\n}\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media/images'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/API/settings.py b/API/API/settings.py
--- a/API/API/settings.py	(revision 4e63dacd0a350a5fb6414f960501ae17d0ac2a57)
+++ b/API/API/settings.py	(date 1712849392302)
@@ -34,9 +34,11 @@
 ALLOWED_HOSTS = ['*']
 CORS_ALLOWED_ORIGINS = [
     "http://localhost:3000",
+    "http://127.0.0.1:3000"
 ]
 CSRF_TRUSTED_ORIGINS = [
     "http://localhost:3000",
+    "http://127.0.0.1:3000"
 ]
 CORS_ALLOW_CREDENTIALS = True
 # Application definition

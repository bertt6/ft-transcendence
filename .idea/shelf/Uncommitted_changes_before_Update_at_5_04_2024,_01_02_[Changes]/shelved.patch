Index: Backend/static/scripts/profile.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import BaseComponent from \"../components/Component.js\";\nimport {API_URL, BASE_URL, getCookie, loadPage} from \"./spa.js\";\nimport {notify} from \"../components/Notification.js\";\nimport {request} from \"./Request.js\";\nimport {escapeHTML} from \"./utils.js\";\nclass History extends BaseComponent\n{\n    constructor(state,parentElement = null) {\n        super(state,parentElement);\n        this.handleHTML()\n    }\n    handleHTML()\n    {\n        return `\n            <div class=\"histories-wrapper\">\n            ${this.state.histories.map(history => `\n              <div class=\"history-wrapper\">\n                <div class=\"friend-info\">\n                  <div class=\"history-type\"><h5>1v1</h5></div>\n                </div>\n                <div class=\"history-data\">\n                  <h5>BSAMLI</h5>\n                  <h5>VS</h5>\n                  <h5>OFIRAT</h5>\n                </div>\n                <div class=\"history-score\">\n                  <h5>4</h5>\n                  <h5>-</h5>\n                  <h5>0</h5>\n                </div>\n                <div>\n                  <h5>1 DAY AGO</h5>\n                </div>\n              </div>\n            `)}\n            </div>\n          </div>\n`\n    }\n    render() {\n        this.parentElement.innerHTML = this.handleHTML();\n    }\n}\nclass Stats extends BaseComponent {\n    constructor(state, parentElement = null) {\n        super(state, parentElement);\n        this.html = this.handleHTML();\n    }\n\n    handleHTML() {\n    console.log(this.state)\n    return `\n    <div class=\"stats-wrapper\">\n    <div class=\"stats-row\">\n        <div class=\"stats-item\">\n            <h3>Total Games</h3>\n            <p class=\"stats-value\">${this.state.statsInfo.total_games}</p>\n        </div>\n        <div class=\"stats-item\">\n            <h3>Total Win</h3>\n            <p class=\"stats-value\">${this.state.statsInfo.total_wins}</p>\n        </div>\n    </div>\n    <div class=\"stats-row\">\n        <div class=\"stats-item\">\n            <h3>Total Losses</h3>\n            <p class=\"stats-value\">${this.state.statsInfo.total_losses}</p>\n        </div>\n        <div class=\"stats-item\">\n            <h3>Points</h3>\n            <p class=\"stats-value\">${this.state.statsInfo.points}</p>\n        </div>\n    </div>\n    <div class=\"stats-row\">\n        <div class=\"stats-item\">\n            <h3>Win Rate</h3>\n            <p class=\"stats-value\">%${((parseInt(this.state.statsInfo.total_wins) / (parseInt(this.state.statsInfo.total_wins) + parseInt(this.state.statsInfo.total_losses))) * 100).toFixed(2)}</p>\n        </div>\n        <div class=\"stats-item\">\n            <h3 href=\"leaderboard\" class=\"stats-value\">Rank</>\n            <p class=\"stats-value\">#3</p>\n        </div>\n    </div>\n</div>\n\n    `;\n}\n\n    render() {\n        this.parentElement.innerHTML = this.html;\n    }   \n}\nclass Friends extends BaseComponent\n{\n    constructor(state,parentElement = null) {\n        super(state,parentElement);\n        this.html = this.handleHTML()\n    }\n    handleHTML()\n    {\n        return `\n            <div class=\"friends-wrapper\">\n            ${this.state.friends.map(friend => `\n              <div class=\"friend-wrapper\">\n                <div class=\"friend-info\">\n                  <div class=\"friend-image\">\n                    <img src=\"https://picsum.photos/id/237/200/300\" alt=\"\" />\n                  </div>\n                  <div class=\"friend-data\">\n                    <h6>${friend.user.first_name.length  > 0 ?escapeHTML(friend.user.first_name) : \"No name is set for this user\" }</h6>\n                    <span>${friend.nickname.length > 0 ? friend.nickname: friend.user.username}</span>\n                  </div>\n                </div>\n                <div class=\"friend-more\">\n                  <div><img src=\"/static/public/image.svg\" alt=\"\" /></div>\n                  <div><img src=\"/static/public/chat-bubble.svg\"/></div>\n                  <div><img src=\"/static/public/more.svg\" alt=\"\" /></div>\n                </div>\n              </div>\n            `).join('')}\n          </div>\n        `\n    }\n    setState(newState) {\n        this.state = { ...this.state, ...newState };\n        this.render();\n    }\n}\n\nclass ProfileInfo extends BaseComponent\n{\n    constructor(state,parentElement = null) {\n        super(state,parentElement);\n    }\n    handleEditHTML()\n    {\n        const {nickname, first_name, last_name,bio,profile_picture} = this.state.profile;\n        return `\n        <div class=\"profile-info-wrapper\">\n                <div class=\"profile-edit\">\n                    <button class=\"pong-button\" id=\"edit-button\">\n                X\n                    </button>\n                </div>\n        <form style=\"display: flex; flex-direction: column; align-items: center\" id=\"update-form\">\n              <div class=\"profile-photo\">\n                <img\n                  src=\"${BASE_URL}${profile_picture}\"\n                  alt=\"\"\n                  class=\"\"\n                />\n              </div>\n              <div>\n                <input class=\"transparent-input\" id=\"profile-nickname\" value=\"${nickname ? nickname: \"no nickname is set!\"}\"/>\n                <input class=\"transparent-input\" id=\"profile-firstname\"  value=\"${first_name ? first_name: \"no first name is set\"}\">\n              </div>\n              <div>\n                <textarea id=\"profile-bio\" cols=\"30\" rows=\"5\"  class=\"transparent-input\">${bio ? bio : 'No bio available'}</textarea>  \n              </div>\n        <button class=\"pong-button\" id=\"save-button\" type=\"submit\">save</button>\n            </form>\n        </div>\n        `\n    }\n    handleHTML()\n    {\n        const {nickname, first_name, last_name,bio,profile_picture} = this.state.profile;\n        return `\n        <div class=\"profile-info-wrapper\">\n                <div class=\"profile-edit\">\n                    <button class=\"pong-button\" id=\"edit-button\">\n                    <img src=\"/static/public/edit.svg\" alt=\"\">\n                    </button>\n                </div>\n              <div class=\"profile-photo\">\n                <img\n                  src=\"${BASE_URL}${profile_picture}\"\n                  alt=\"\"\n                  class=\"\"\n                />\n              </div>\n              <div>\n                <h1>${nickname ? escapeHTML(nickname): \"no nickname is set!\"}</h1>\n                <span>${first_name ? escapeHTML(first_name): \"no first name is set\"}</span>\n              </div>\n              <div>\n                <p>\n                ${bio ? escapeHTML(bio): 'No bio available'}\n                </p>\n              </div>`\n    }\n    updateProfile = async (formData) => {\n        const tokens = JSON.parse(getCookie('tokens'));\n        try\n        {\n            let response = await request(`${API_URL}/profile`,{\n                method:'PUT',\n                headers:{\n                    'Content-Type':'application/json',\n                    'Authorization':`Bearer ${tokens.access}`\n                },\n                body: JSON.stringify(formData)\n            });\n            notify('Profile updated', 3, 'success');\n            this.setState({...this.state, profile:response});\n        }\n        catch(error)\n        {\n            console.error('Error:', error);\n            notify('Error updating profile', 3, 'error')\n        }\n    }\n    render() {\n        this.parentElement.innerHTML = this.state.isEditing ? this.handleEditHTML() : this.handleHTML();\n        const updateForm = document.getElementById('update-form');\n        if(updateForm)\n        {\n            updateForm.addEventListener('submit', async (e) => {\n                e.preventDefault()\n                let formData = {\n                    nickname: document.getElementById('profile-nickname').value,\n                    bio: document.getElementById('profile-bio').value\n                }\n                await this.updateProfile(formData);\n            });\n        }\n    }\n    setState(newState) {\n        this.state = { ...this.state, ...newState };\n        this.render();\n        document.getElementById('edit-button').addEventListener('click', () => {\n            this.setState({...this.state, isEditing: !this.state.isEditing});\n        });\n    }\n}\nasync function fetchProfile()\n{\n    const tokens = JSON.parse(getCookie('tokens'));\n    try\n    {\n    let data = await request(`${API_URL}/profile`,{\n        method:'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${tokens.access}`\n        }\n    });\n    const profileParentElement = document.getElementById('profile-info');\n    const profile = new ProfileInfo({profile:data,isEditing:false},profileParentElement);\n    profile.render();\n    const editButton = document.getElementById('edit-button');\n        editButton.addEventListener('click', () => {\n        profile.setState({...profile.state, isEditing: !profile.state.isEditing});\n    });\n    }\n    catch(error)\n    {\n        console.error('Error:', error);\n        notify('Error fetching profile', 3, 'error')\n    }\n}\nasync function assignDataRouting()\n{\n    const historyButton = document.getElementById('history-button');\n    const friendsButton  = document.getElementById('friends-button');\n    const statsButton = document.getElementById('stats-button');\n    historyButton.addEventListener('click', (e) => {\n        history.replaceState(null, null, '#history')\n        handleRouting()\n    });\n    friendsButton.addEventListener('click', (e) => {\n        history.replaceState(null, null, '#friends')\n        handleRouting()\n    });\n    statsButton.addEventListener('click', (e) => {\n        history.replaceState(null, null, '#stats')\n        handleRouting()\n    });\n}\n\nasync function fetchStats()\n{\n    try{\n        let response = await request(`${API_URL}/profile/stats`,{\n            method:'GET',\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization':`Bearer ${JSON.parse(getCookie('tokens')).access}`\n            }\n        });\n        return response;\n    }\n    catch (error)\n    {\n        console.error('Error:', error);\n        notify('Error fetching stats', 3, 'error')\n    }\n}\n\nasync function fetchFriends()\n{\n    try{\n        let data = await request(`${API_URL}/profile/friends`,{\n            method:'GET',\n            headers:{\n                'Content-Type':'application/json',\n                'Authorization':`Bearer ${JSON.parse(getCookie('tokens')).access}`\n        }\n    });\n        return data;\n    }\n    catch (error)\n    {\n        console.error('Error:', error);\n        notify('Error fetching friends', 3, 'error')\n    }\n}\nasync function handleRouting()\n{\n    const hash = location.hash;\n    const parentElement = document.getElementById('data-wrapper');\n    if(hash === '#history')\n    {\n        const history = new History({histories: [1]},parentElement);\n        history.render();\n    }\n    if(hash === '#friends')\n    {\n        let data = await fetchFriends();\n        const friends = new Friends({friends:data},parentElement);\n        friends.render();\n    }\n    if(hash === '#stats')\n    {\n        let data = await fetchStats();\n        const statsInfo = new Stats({statsInfo:data}, parentElement);\n        statsInfo.render();\n    }\n}\n\nconst App = async () => {\n    await fetchProfile();\n    await assignDataRouting();\n    await handleRouting();\n}\n\nApp().catch((error) => console.error(error));
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/static/scripts/profile.js b/Backend/static/scripts/profile.js
--- a/Backend/static/scripts/profile.js	(revision 8f1fbb9bac7ad0e49363364a7eb5608aac4b9ba5)
+++ b/Backend/static/scripts/profile.js	(date 1712160574222)
@@ -135,6 +135,7 @@
     handleEditHTML()
     {
         const {nickname, first_name, last_name,bio,profile_picture} = this.state.profile;
+        print(this.state.profile.nickname)
         return `
         <div class="profile-info-wrapper">
                 <div class="profile-edit">
Index: API/API/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for API project.\n\nGenerated by 'django-admin startproject' using Django 5.0.3.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\nimport datetime\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nload_dotenv()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '0a4fd7e3567eab20bab2f2d6682ea96d0d865050bfcde9c293aa7f9ec48bce55'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:3000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\n\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    \"Apps.Auth.apps.AuthConfig\",\n    \"Apps.Profile.apps.ProfileConfig\",\n    \"Apps.Tournament.apps.TournamentConfig\",\n    'Apps.SocialMedia.apps.SocialmediaConfig',\n    \"Apps.Chat.apps.ChatConfig\",\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'API.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates']\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'API.wsgi.application'\nASGI_APPLICATION = 'API.asgi.application'\n\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv('PG_DB'),\n        \"USER\": os.getenv('PG_USER'),\n        \"PASSWORD\": os.getenv('PG_PASSWORD'),\n        \"HOST\": os.getenv('PG_HOST'),\n        \"PORT\": os.getenv('PG_PORT'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Europe/Istanbul'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=50),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',\n    'TOKEN_EXPIRED_CALLBACK': 'token_expired_callback',\n    'JTI_CLAIM': 'jti',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),\n}\n\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_SSL = False\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media/images'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/API/settings.py b/API/API/settings.py
--- a/API/API/settings.py	(revision 8f1fbb9bac7ad0e49363364a7eb5608aac4b9ba5)
+++ b/API/API/settings.py	(date 1712190527905)
@@ -32,9 +32,11 @@
 ALLOWED_HOSTS = ['*']
 CORS_ALLOWED_ORIGINS = [
     "http://localhost:3000",
+    "http://127.0.0.1:3000"
 ]
 CSRF_TRUSTED_ORIGINS = [
     "http://localhost:3000",
+    "http://127.0.0.1:3000"
 ]
 CORS_ALLOW_CREDENTIALS = True
 # Application definition

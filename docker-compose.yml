version: '3'

services:
  postgres:
    build:
      context: psql
      dockerfile: db.Dockerfile
    ports:
      - "5432:5432"
    volumes:
      - ./psql/data:/var/lib/postgresql/data
    networks:
      - backend
      - monitoring

  frontend:
    build:
      context: Backend
      dockerfile: frontend.Dockerfile
    ports:
      - 3030:3030
    depends_on:
      - postgres
      - redis
    volumes:
      - static_volume:/app/Backend/static
    command: python manage.py runserver 0.0.0.0:3030

  backend:
    build:
      context: API
      dockerfile: backend.Dockerfile
    depends_on:
      - postgres
      - redis
      - logstash  # Logstash'e bağımlı
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://postgres:123@db:5432/transcendenceDB
    volumes:
      - logs_volume:/API/logs
    command: sh -c "sleep 10 && python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      - backend
      - elk

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - "6379:6379"

  nginx:
    image: elk-nginx:latest
    build:
      context: ./Nginx
      dockerfile: nginx.Dockerfile
    volumes:
      - static_volume:/src/staticfiles
      - ./Backend/templates:/src/templates
    ports:
      - 2020:2020
    depends_on:
      - frontend

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Devops/grafana-prometheus/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./Devops/grafana-prometheus/prometheus/rules.yml:/etc/prometheus/rules.yml
    restart: always
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./Devops/grafana-prometheus/grafana/grafana_data:/var/lib/grafana
      - ./Devops/grafana-prometheus/grafana/grafana-datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./Devops/grafana-prometheus/grafana/grafana-dashboards:/var/lib/grafana/dashboards
      - ./Devops/grafana-prometheus/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
    restart: always
    networks:
      - monitoring

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - monitoring

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes: 
      - "/:/rootfs"
      - "/var/run:/var/run"
      - "/sys:/sys"
      - "/var/lib/docker/:/var/lib/docker"
      - "/dev/disk/:/dev/disk"
    privileged: true
    devices: 
      - "/dev/kmsg"
    restart: unless-stopped
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:v0.12.0
    ports:
      - 9093:9093
    volumes:
      - ./Devops/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '-config.file=/etc/alertmanager/alertmanager.yml'
      - '-storage.path=/alertmanager'
    deploy:
      mode: global

  filebeat:
    image: filebeat:latest
    build:
      context: ./Devops/elk-stack/filebeat
      dockerfile: filebeat.Dockerfile
    volumes:
      - logs_volume:/logs:ro
    command: filebeat -c /etc/filebeat/filebeat.yml -e -d "*" -strict.perms=false
    depends_on:
      - backend

  # ELK Server
  logstash:
    image: logstash:latest
    restart: always
    #ports:
    #  - 5959:5959
    #  - 5044:5044
    build:
      context: ./Devops/elk-stack/logstash
      dockerfile: logstash.Dockerfile
    depends_on:
      - elasticsearch
    volumes:
      - logs_volume:/app/API/logs:ro
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    restart: always
    #ports:
    #  - 9200:9200
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./Devops/elk-stack/elasticsearch_volume:/usr/share/elasticsearch/data
  kibana:
    image: kibana:latest
    build:
      context: ./Devops/elk-stack/kibana
      dockerfile: kibana.Dockerfile
    restart: always
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
      - logstash

networks:
  monitoring:
    driver: bridge
  backend:
    driver: bridge
  elk:
    driver: bridge

volumes:
  alertmanager-data:
  logs_volume:
  static_volume: